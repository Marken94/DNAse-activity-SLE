import numpy as np
from sklearn.cluster import DBSCAN
import matplotlib.pyplot as plt

# Data
data = np.array([
    1.63086937, 1.266319441, 1.109075122, 1.069400557, 1.058212241,
    0.993308789, 0.95916355, 0.949721213, 0.944324718, 0.924738671,
    0.850369277, 0.83521671, 0.776119799, 0.700765137, 0.588462194,
    0.553195861, 0.521684532, 0.476937364, 0.4538013, 0.426320911,
    0.375731267, 0.362797149, 0.051700353, 0.042504634, -0.318451246,
    -0.44439776, -0.447015606, -0.457311478, -0.459282712, -0.515301647,
    -0.566998659, -0.593766489, -0.600343581, -0.610001577, -0.648996501,
    -0.799724201, -0.823069916, -0.851582453, -0.870052443, -0.88585625,
    -0.88645772, -0.911120044, -0.943857738, -0.974202759, -1.045275209,
    -1.061780582, -1.117418546, -1.135726303, -1.175678875, -1.198321941,
    -1.225483034, -1.233512794, -1.271402757, -1.299988938, -1.541664374,
    -1.949620244
])

# Transform data into a 2D array (principal value as a single point in 1D space)
X = data.reshape(-1, 1)

# Apply DBSCAN
# eps - maximum distance between two points to consider them neighbors
# min_samples - minimum number of points in the neighborhood to consider a point as a core
dbscan = DBSCAN(eps=0.35, min_samples=3)
clusters = dbscan.fit_predict(X)

# Visualisation
plt.figure(figsize=(10, 6))
plt.scatter(range(len(data)), data, c=clusters, cmap='viridis', s=100)
plt.colorbar(label='Cluster')
plt.xlabel('Point index')
plt.ylabel('Value')
plt.title('DBSCAN clustering')
plt.grid(True)
plt.show()

# Save the graph to a file (before plt.show()!)
plt.savefig('dbscan_clustering.png', dpi=600, bbox_inches='tight')  # PNG
# plt.savefig('dbscan_clustering.pdf', bbox_inches='tight')  # PDF
# plt.savefig('dbscan_clustering.svg', bbox_inches='tight')  # SVG

plt.show()  # Показываем график (после сохранения)

# Output information about clusters
print("Cluster Labels:", clusters)
n_clusters = len(set(clusters)) - (1 if -1 in clusters else 0)
n_noise = list(clusters).count(-1)
print(f"Clusters found: {n_clusters}")
print(f"Noise points: {n_noise}")
